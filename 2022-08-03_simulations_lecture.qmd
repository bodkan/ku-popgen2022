---
title: "Simulations in population genetics"
author: "Martin Petr (mp@bodkan.net)"
format:
  revealjs:
    echo: true
    code-line-numbers: false
    fig-align: center
    slide-number: true
---

#

::: columns
::: {.column width="70%"}
> Many problems in population genetics cannot be solved by a mathematician, no matter how gifted. \[It\] is already clear that computer methods are very powerful. This is good. It \[...\] **permits people with limited mathematical knowledge to work on important problems** \[...\]
:::

::: {.column width="30%"}
![](images/crow.jpeg)

[James F. Crow](https://en.wikipedia.org/wiki/James_F._Crow)
:::
:::

## Why simulations?

<br>

-   Intuition for behavior of statistics in various scenarios
-   Fitting model parameters against empirical data (i.e. [ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation))
-   Ground truth for testing and method development

## **TODO** What does it mean to simulate a genome?

A chromosome is:

-   a linear sequence of nucleotides
-   which accumulates mutations in each generation

## **TODO** How do we "get" a genome in real life?

-   A chromosome is a linear sequence of nucleotides.
-   Inherited from generation to generation (maybe with recombination)

# Home-brewed single-locus simulations in R

##

<br>

```{r, setup}
library(tidyverse)
library(parallel)
library(MASS)

set.seed(42)
```


## Single-locus simulation

```{r}
#| results: hide
#| code-line-numbers: "|1-3|5-7|9-10|11|13-14|16-18|20"
N <- 500 # number of (haploid) individuals in the population
generations <- 500 # number of generations to run the simulation for
p_start <- 0.5 # initial allele frequency

# initialize an (empty) trajectory vector of allele frequencies
p_traj<- rep(NA, generations)
p_traj[1] <- p_start

# in each generation...
for (gen_i in 2:generations) {
  p <- p_traj[gen_i - 1] # get the current frequency

  # ... calculate the allele frequency in the next generation ...
  p_next <- rbinom(1, N, p) / N

  # ... and save it to the trajectory vector
  p_traj[gen_i] <- p_next
}

p_traj
```

## $N$ = 500, $p_0 = 0.5$

```{r}
#| code-fold: true
plot(p_traj, type = "l", ylim = c(0, 1),
     xlab = "generations", ylab = "allele frequency")
abline(h = p_start, lty = 2, col = "red")
```

## Let's make it a function

**Input:** $N$, $p_0$ and the number of generations

**Output:** allele frequency trajectory vector

```{r}
#| code-line-numbers: "|1|15"
simulate <- function(N, p_start, generations) {
  # initialize an (empty) trajectory vector of allele frequencies
  p_traj<- rep(NA, generations)
  p_traj[1] <- p_start

  # in each generation...
  for (gen_i in 2:generations) {
    p <- p_traj[gen_i - 1] # get the current frequency
    # ... calculate the allele frequency in the next generation ...
    p_next <- rbinom(1, N, p) / N
    # ... and save it to the trajectory vector
    p_traj[gen_i] <- p_next
  }

  p_traj
}
```

## $N$ = 500, $p_0 = 0.5$ (20 replicates)

```{r}
#| code-fold: true
#| fig-align: center
reps <- replicate(20, simulate(N = 500, p_start = 0.5, generations = 2000))

matplot(reps, ylim = c(0, 1), xlab = "generations", ylab = "allele frequency", type = "l", lty = 1)
```

## $N$ = 1000, $p_0 = 0.5$ (20 replicates)

```{r}
#| code-fold: true
#| fig-align: center
reps <- replicate(20, simulate(N = 1000, p_start = 0.5, generations = 2000))

matplot(reps, ylim = c(0, 1), xlab = "generations", ylab = "allele frequency", type = "l", lty = 1)
```

## $N$ = 5000, $p_0 = 0.5$ (20 replicates)

```{r}
#| code-fold: true
#| fig-align: center
reps <- replicate(20, simulate(N = 5000, p_start = 0.5, generations = 2000))

matplot(reps, ylim = c(0, 1), xlab = "generations", ylab = "allele frequency", type = "l", lty = 1)
```

## $N$ = 10000, $p_0 = 0.5$ (20 replicates)

```{r}
#| code-fold: true
#| fig-align: center
reps <- replicate(20, simulate(N = 10000, p_start = 0.5, generations = 20000))

matplot(reps, ylim = c(0, 1), xlab = "generations", ylab = "allele frequency", type = "l", lty = 1)
```

## $N$ = 10000, $p_0 = 0.5$ (20 replicates)

```{r}
#| eval: false
#| code-fold: true
#| fig-align: center
factors <- fractions(c(3, 2, 1, 1/2, 1/5, 1/10))
matplot(reps, ylim = c(0, 1), xlab = "generations", ylab = "allele frequency", type = "l", lty = 1)
abline(v = 10000 * factors, lwd = 5)
```

## Expected allele frequency distribution

```{r}
#| echo: false
p_start <- 0.5
N <- 10000
factors <- fractions(c(3, 2, 1, 1/2, 1/5, 1/10))

final_frequencies <- parallel::mclapply(
  seq_along(factors), function(i) {
    f <- factors[i]
    t <- as.integer(N * f)
    # get complete trajectories as a matrix (each column a single trajectory)
    reps <- replicate(50000, simulate(N = N, p_start = p_start, generations = t))
    # only keep the last slice of the matrix with the final frequencies
    data.frame(
      t = sprintf("t = %s * N", f),
      freq = reps[t, ]
    )
  },
  mc.cores = parallel::detectCores()
) %>% do.call(rbind, .)
final_frequencies$t <- fct_rev(fct_relevel(final_frequencies$t, sprintf("t = %s * N", factors)))
```

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| echo: false
#| fig-align: center
#| fig-height: 10
#| fig-width: 10
final_frequencies %>% .[.$freq > 0 & .$freq < 1, ] %>%
ggplot() +
  geom_histogram(aes(freq, y = ..density.., fill = t), position = "identity", bins = 100, alpha = 0.75) +
  labs(x = "allele frequency") +
  coord_cartesian(ylim = c(0, 3)) +
  facet_grid(t ~ .) +
  guides(fill = guide_legend(sprintf("time since\nthe start\n[assuming\nN = %s]", N))) +
  theme_minimal() +
  theme(strip.text.y = element_blank(),
        axis.title.x = element_text(size = 15),
        axis.title.y = element_text(size = 15),
        axis.text.x = element_text(size = 15),
        axis.text.y = element_text(size = 15),
        legend.title = element_text(size = 15),
        legend.text = element_text(size = 15))
```
:::

::: {.column width="50%"}
::: fragment
![*"Diffusion Models in Population Genetics"*, [Kimura (1964)](https://www.jstor.org/stable/3211856#metadata_info_tab_contents)](images/kimura.jpeg)
:::
:::
:::

# Bonus exercise

If you're bored later, try adding selection to this model!

In each generation, weight the frequencies based on fitness of each of the tree genotypes.

If you need a hint, take a look [here](https://github.com/bodkan/notebooks/blob/master/MLE_single_locus_selection.ipynb).

# Why bother?

<!-- ## Let's add selection! -->

<!-- Write `simulate_selection(s, N, p_start, generations)`, where `s` is the selection coefficient. -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- simulate_selection <- function(s, N, p_start, generations) { -->
<!--   # we assume additivity -->
<!--   h <- 1/2 -->

<!--   # initialize an (empty) trajectory vector of allele frequencies -->
<!--   p_traj<- rep(NA, generations) -->
<!--   p_traj[1] <- p_start -->

<!--   # in each generation... -->
<!--   for (gen_i in 2:generations) { -->
<!--     p <- p_traj[gen_i - 1] # get the current frequency -->

<!--     fitnesses <- c( -->
<!--       p ^ 2           * (1 + s), -->
<!--       2 * p * (1 - p) * (1 + h * s), -->
<!--       (1 - p) ^ 2     * 1 -->
<!--     ) -->
<!--     p_next <- (fitnesses[1] + h * fitnesses[2]) / mean(fitnesses) -->

<!--     if (p_next >= 1) p_next <- 1 -->

<!--     # ... calculate the allele frequency in the next generation ... -->
<!--     p_next <- rbinom(1, N, p_next) / N -->

<!--     # ... and save it to the trajectory vector -->
<!--     p_traj[gen_i] <- p_next -->
<!--   } -->

<!--   p_traj -->
<!-- } -->
<!-- ``` -->

<!-- ```{r} -->
<!-- deterministic_selection <- function(t, p_start, s) { -->
<!--   p_start * exp(s * t / 2) / (p_start * exp(s * t / 2) + (1 - p_start)) -->
<!-- } -->
<!-- ``` -->

<!-- ```{r} -->
<!-- deterministic_traj <- sapply(1:1000, deterministic_selection, p_start = 0.01, s = 0.1) -->

<!-- plot(deterministic_traj, type = "l") -->
<!-- ``` -->

<!-- (Let's assume additive selection: $h = \frac{1}{2}$). -->

##

:::: columns

::: {.column width="40%"}

<center>

![](images/feynman.jpeg)

[Richard Feynman](https://en.wikipedia.org/wiki/Richard_Feynman)

</center>

:::

::: {.column width="60%"}

![](images/feynman_quote.png)

:::

::::



# {background-image="images/montypython.jpeg"}


::: factor
<h1 color="black" style="background-color: white">But now for something completely different.</h1>
:::




# {background-image="images/montypython.jpeg"}


<h1 color="black" style="background-color: white">Let's do "real" simulations!</h1>





## There are many pieces of simulation software

The most famous and widely used are [SLiM](https://messerlab.org/slim/) and [msprime](https://tskit.dev/msprime/docs/stable/intro.html).

::: fragment
They are both extremely powerful...
:::

::: fragment
... but they require a lot of programming knowledge and quite a lot of code to write non-trivial simulations (without bugs).
:::

::: fragment
**We will learn simulation concepts using [*slendr*](http://www.slendr.net), a convenient R interface to both SLiM and msprime.**
:::

# SLiM

##

:::: {.columns}

::: {.column width="60%"}

<h2>What is SLiM?</h2>

::: {.fragment}
- **Forward-time simulator**
:::

::: {.fragment}
- It's fully programmable!
:::

::: {.fragment}
- Massive library of functions for:
  - Demographic events
  - Various mating systems
  - Selection, quantitative traits, ...
:::

::: {.fragment}
- \> 700 pages long [manual](https://github.com/MesserLab/SLiM/releases/download/v3.7.1/SLiM_Manual.pdf)!
:::

:::

::: {.column width="40%"}

<center>![Modified from Alex Drummond](images/sim_sketches.001.png){width="100%"}</center>

:::

::::

## SLiMgui -- [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) for SLiM

<center>![](images/slimgui.png)</center>

## Simple neutral simulation in SLiM

```{bash}
#| echo: false
cat script.slim
```

# msprime

##

:::: {.columns}

::: {.column width="60%"}

<h2>What is [msprime](https://tskit.dev/msprime/docs/stable/intro.html)?</h2>

:::


::: {.column width="40%"}

<center>![Modified from Alex Drummond](images/sim_sketches.001.png){width="100%"}</center>

:::

::::

##

:::: {.columns}

::: {.column width="60%"}

<h2>What is [msprime](https://tskit.dev/msprime/docs/stable/intro.html)?</h2>

::: {.fragment}
- A Python module for writing **coalescent simulations**
:::

::: {.fragment}
- Extremely fast (genome-scale, population-scale data)
:::

::: {.fragment}
- You must know Python fairly well to build complex models
:::

:::

::: {.column width="40%"}

<center>![Modified from Alex Drummond](images/sim_sketches.002.png){width="100%"}</center>

:::

::::

## Simple simulation using _msprime_

The following is basically the same model as the SLiM script earlier:
&nbsp;

```{bash}
#| echo: false
cat script.py
```

source: [link](https://tskit.dev/msprime/docs/stable/demography.html#demographic-models)





















#

<center>

![](images/slendr_logo.png){width="30%"}

<br>

<h2>[www.slendr.net](www.slendr.net)</h2>

</center>

## Why a new package? -- spatial simulations!

::: fragment

<center>
![](images/animation.gif){width="70%"}
</center>

:::

## Why a new package?

::: {.incremental}

-   Most researchers are not expert programmers

-   All but the most trivial simulations require lots of code

-   90% **<citation needed>** of simulations are basically the same!

    - create populations (splits and $N_e$ changes)

    - specify if/how they should mix (rates and times)

    - save output (VCF, EIGENSTRAT)

-   Lot of code duplication across projects

:::

::: fragment
<center>**_slendr_ makes "standard" simulations trivial (for newbies _and_ experts) and unlocks new kinds of spatial simulations**</center>
:::

# Let's get started

## We will use `slendr` & `tidyverse`

First run this:

```{r}
library(tidyverse) # table processing/filtering and plotting

library(slendr) # simulation and tree-sequence analysis
```

<br>If you get a message about missing Python modules, run:

```{r}
#| eval: false
setup_env()
```

<center>**(ignore the message about missing SLiM)**</center>

<br> To check that everything is setup correctly, run:

```{r}
#| output: false
check_env()
```



#

<h1>_slendr_ workflow:<br></h1>
<b><h2>building (complex) models<br>
from simple components</h2></b>


## Typical steps

<br>

1. creating populations
2. scheduling population splits
3. programming $N_e$ size changes
4. encoding gene-flow events
5. simulation sequence of a given size
6. computing statistics from simulated outputs



## Creating a population

A name, size and the time of appearance must be given:

```{r}
pop1 <- population("pop1", N = 1000, time = 1)
```


. . .

<br>

Typing an object prints out a summary in the R console:

```{r}
pop1
```




## Programming population splits

Splits are indicated by the `parent = <pop>` argument:

```{r}
pop2 <- population("pop2", N = 100, time = 50, parent = pop1)
```


. . .

<br>

The split is reported in the "historical summary":

```{r}
pop2
```




## Scheduling resize events -- `resize()`

Step size decrease:

```{r}
#| code-line-numbers: "2"
pop1 <- population("pop1", N = 1000, time = 1)
pop1_step <- resize(pop1, N = 100, time = 500, how = "step")
```

<br>

Exponential increase:

```{r}
#| code-line-numbers: "2"
pop2 <- population("pop2", N = 100, time = 50, parent = pop1)
pop2_exp <- resize(pop2, N = 10000, time = 500, end = 2000, how = "exponential")
```





## Tidyverse-style [pipe](https://magrittr.tidyverse.org) interface

Step size decrease:

```{r}
pop1 <-
  population("pop1", N = 1000, time = 1) %>%
  resize(N = 100, time = 500, how = "step")
```

<br>

Exponential increase:

```{r}
pop2 <-
  population("pop2", N = 1000, time = 1) %>%
  resize(N = 10000, time = 500, end = 2000, how = "exponential")
```

<br>

<center>**This accomplishes the same thing as the code on the previous slide, but it is a bit more "elegant".**</center>


## More complex full model

```{r}
#| code-line-numbers: "|15-20"
pop1 <- population("pop1", N = 1000, time = 1)

pop2 <-
  population("pop2", N = 1000, time = 300, parent = pop1) %>%
  resize(N = 100, how = "step", time = 1000)

pop3 <-
  population("pop3", N = 1000, time = 400, parent = pop2) %>%
  resize(N = 2500, how = "step", time = 800)

pop4 <-
  population("pop4", N = 1500, time = 500, parent = pop3) %>%
  resize(N = 700, how = "exponential", time = 1200, end = 2000)

pop5 <-
  population("pop5", N = 100, time = 600, parent = pop4) %>%
  resize(N = 50, how = "step", time = 900) %>%
  resize(N = 250, how = "step", time = 1200) %>%
  resize(N = 1000, how = "exponential", time = 1600, end = 2200) %>%
  resize(N = 400, how = "step", time = 2400)
```


## Remember: each object carries its history

```{r}
pop5
```




## Last step before simulation: compilation

<br>

```{r}
model <- compile_model(
  list(pop1, pop2, pop3, pop4, pop5),
  generation_time = 1,
  simulation_length = 3000
)
```

<br>

<center>**Compilation takes a list of model components, performs internal consistency checks, returns a single model object.**</center>



## Model visualization

```{r}
#| fig-width: 7
#| fig-align: center
plot_model(model)
```





## Simulating data (finally...)

We have the compiled `model`, how do we simulate data?

*slendr* has two simulation engines already built-in:

-   SLiM engine
-   msprime engine

. . .

<center>**You don't have to write any msprime/SLiM code!**</center>

. . .

Take a model object and use the built-in simulation engine:

```{r, eval = FALSE}
ts <- msprime(model, sequence_length = 100e6, recombination_rate = 1e-8)
```

. . .

<br>
<center>`ts` is a so-called "tree sequence"</center>

# The output of a *slendr* simulation is a **tree sequence**

## What is a tree sequence?

<center>![](images/tree_sequence_diagram.png){width="90%"}</center>

-   A record of full genetic ancestry of a set of samples
-   An encoding of DNA sequence carried by those samples
-   An efficient analysis framework

<center>[from the _tskit_ project](https://tskit.dev/learn.html#what)</center>

# Why a tree sequence?

## What we usually have

<center>![](images/vcf_screenshot.png){width="90%"}</center>

## What we usually *want*

(As full as possible) a representation of our samples' history:

<center>![](images/tree_sequence_diagram.png)</center>

::: fragment
<center>**And this is exactly what tree sequences give us.**</center>
:::

## Let's get back to the model we defined earlier

```{r}
#| fig-align: center
#| echo: false
plot_model(model)
```

## Simulating a tree-sequence output

<br>
By default, `msprime` function automatically loads the tree-sequence that the simulation produced in the background:

<br>

```{r}
ts <- msprime(
  model,
  sequence_length = 100e6,
  recombination_rate = 1e-8
)
```

. . .

<br>

If we type `ts` into an R console, we get...

## ... a tree-sequence content summary

```{r}
ts
```




# What can we do with this?

## R interface to tskit

<center>

![](images/slendr_tskit.png){width="120%"}

This [R interface](https://www.slendr.net/reference/index.html#tree-sequence-loading-and-processing) links to Python methods implemented in [_tskit_](https://tskit.dev/tskit/docs/stable/python-api.html#statistics).

</center>


## Here is the magic

Tree sequences make it possible to directly compute many quantities of interest *without going via conversion to a genotype table/VCF*!

<center>![](images/tree_sequence_diagram.png)</center>

# How do we use this in practice?

#

<h1>To analyze tree sequences, we need to refer to "samples"</h1>

## Extracting sample information

Each "sampled" individual in _slendr_ has a symbolic name, a sampling time, and a population assignment:

```{r}
#| fig-align: center
#| echo: false
#| fig-width: 8
plot_model(model)
```

## Extracting sample information

Each "sampled" individual in _slendr_ has a symbolic name, a sampling time, and a population assignment:

:::: columns

::: {.column width="55%"}
```{r}
#| output-location: fragment
ts_samples(ts)
```
:::

::: {.column width="2%"}
&nbsp;
:::

::: {.column width="43%"}
```{r}
#| output-location: fragment
ts_samples(ts) %>% count(pop)
```
:::

::::



## Analyzing tree sequences with _slendr_

Let's say we have the following model and we simulate a tree sequence from it.

```{r}
#| code-line-numbers: "|1|2|4"
pop <- population("pop", N = 10000, time = 1)
model <- compile_model(pop, generation_time = 1, simulation_length = 10000)

ts <- msprime(model, sequence_length = 100e6, recombination_rate = 1e-8)
```

<br>

<center>**_slendr_ provides a large [library of functions](https://www.slendr.net/reference/index.html#tree-sequence-loading-and-processing) for computing population genetic statistics on tree sequences**</center>

## Example: allele frequency spectrum

```{r}
#| echo: false
set.seed(42)
```

:::: columns

:::  {.column width="55%"}
```{r}
#| code-line-numbers: "|3-6|11-16"
# sample 5 individuals
# (i.e. 10 chromosomes)
samples <-
  ts_samples(ts) %>%
  sample_n(5) %>%
  pull(name)

# compute allele frequency
# spectrum from the given set
# of individuals
afs <- ts_afs(
  ts, list(samples),
  mode = "branch",
  polarised = TRUE
)
```
:::

::: {.column width="2%"}
&nbsp;
:::

::: {.column width="43%"}
::: fragment
```{r}
#| fig-height: 10
plot(afs, type = "b",
     xlab = "allele count bin",
     ylab = "frequency")
```
:::
:::

::::




## But wait, we don't have any mutations!

```{r}
ts
```


## How can we compute statistics?

There is a duality between mutations and branch lengths in trees (more [here](https://tskit.dev/tskit/docs/stable/stats.html)).

<center>

![](images/tree_sequence_diagram.png)

<h3>But what if we want mutations?</h3>

</center>

## Coalescent and mutation processes can be decoupled!

<center>

![](images/tree_sequence_diagram.png)

<h3>This means we can add mutations<br>_after_ the simulation.</h3>

</center>




## This allows efficient, massive simulations (especially with SLiM)

:::: columns

::: {.column width="42%"}

::: {.fragment}
```{r}
#| eval: false
ts_mutated <- ts_mutate(
  ts,
  mutation_rate = 1e-8
)
```
:::

::: {.fragment}
Or, with a shortcut:

```{r}
ts <- msprime(
  model,
  sequence_length = 100e6,
  recombination_rate = 1e-8
) %>%
  ts_mutate(
    mutation_rate = 1e-8
  )
```
:::

:::

::: {.column width="1%"}
&nbsp;
:::

::: {.column width="57%"}

::: {.fragment}
```{r}
#| echo: false
ts
```
:::
:::

::::



## Example: allele frequency spectrum

```{r}
#| echo: false
set.seed(42)
```

:::: columns

:::  {.column width="55%"}
```{r}
#| code-line-numbers: "|3-6|11-16"
# sample 5 individuals
# (i.e. 10 chromosomes)
samples <-
  ts_samples(ts) %>%
  sample_n(5) %>%
  pull(name)

# compute allele frequency
# spectrum from the given set
# of individuals
afs <- ts_afs(
  ts, list(samples),
  polarised = TRUE
)

afs
```
:::

::: {.column width="2%"}
&nbsp;
:::

::: {.column width="43%"}
::: fragment
```{r}
#| fig-height: 10
plot(afs, type = "b",
     xlab = "allele count bin",
     ylab = "frequency")
```
:::
:::

::::




## What we have learned so far

1. creating populations -- [`populations()`](https://www.slendr.net/reference/population.html)
2. compiling models -- [`compile_model()`](https://www.slendr.net/reference/compile_model.html)
3. simulating tree sequences -- [`msprime()`](https://www.slendr.net/reference/msprime.html)
4. extracting samples -- [`ts_samples()`](https://www.slendr.net/reference/ts_samples.html)
5. computing AFS -- [`ts_afs()`](https://www.slendr.net/reference/ts_afs.html)

<br>

<center><h1>**Let's put this to use!**</h1></center>




# Exercise #1


## Exercise #1

```{r}
#| echo: false
set.seed(42)
TRUE_NE <- 6543

pop <- population("pop", N = TRUE_NE, time = 100000)
model <- compile_model(pop, generation_time = 1, direction = "backward")

ts <-
  msprime(model, sequence_length = 10e6, recombination_rate = 1e-8, random_seed = 42) %>%
  ts_mutate(mutation_rate = 1e-8, random_seed = 42)

samples <- ts_samples(ts) %>% sample_n(10) %>% pull(name)

observed_afs <- ts_afs(ts, list(samples), polarised = TRUE)
```

Collaborator Hestu gave you AFS computed from 20 individuals of a sub-species of the [_bushy-tailed squirrel_](https://www.zeldadungeon.net/wiki/Bushy-Tailed_Squirrel) discovered in the Forest of Spirits in the land of Hyrule:

```{r}
#| echo: false
dput(as.vector(observed_afs))
```

Fossil evidence is consistent with constant size of the population over 100,000 generations of its history. An Oracle you met in the Temple of Time said that the true squirrel $N_e$ has been between 1000 and 30000.

Use _slendr_ to simulate history of this species. Use this to guess the likely value of squirrel's $N_e$ given the observed AFS.



## Exercise #1 -- hints

1. Write a function that gets $N_e$ as input and returns the AFS.

2. Find the $N_e$ value that will give the closest AFS to the one you got from Hestu. Use whatever method you're comfortable with based on your programming experience:

    - i ) Plot simulated AFS for different $N_e$ with the AFS and just eye-ball $N_e$ value that looks correct.

    - ii ) Simulate AFS across a grid of $N_e$ values and find the closest matching one (maybe use [mean-squared error](https://en.wikipedia.org/wiki/Mean_squared_error)?)

    - iii ) Run a mini-Approximate Bayesian Computation, using the Oracle's range of [10000, 30000] as a uniform prior.


## Exercise #1 -- simulations on a grid

<center><h3>[solution](https://github.com/bodkan/popgen-2022/blob/main/solutions/exercise_1_grid.R)</h3></center>

## Exercise #1 -- ABC inference

<center><h3>[solution](https://github.com/bodkan/popgen-2022/blob/main/solutions/exercise_1_abc.R)</h3></center>

## Exercise #2

:::: columns

::: {.column width="60%"}
Tectonic shifts caused by activated Sheikah towers caused speciation of the squirrels. Unfortunately, their future is clouded by the shadow cast over Hyrule by Calamity Ganon.

Can you help the Oracle predict the future shape of the AFS of the squirrels, assuming starting $N_e$ = 6543? Species #1 will remain constant, species #2 will expand 3X, species #3 will get 3X smaller.

:::

::: {.column width="40%"}
```{r}
#| echo: false
#| fig-height: 13
Ne_start <- 6543
Ne_factor <- 3

pop1 <- population("s1", N = Ne_start, time = 1)

pop2 <-
  population("s2", N = Ne_start, time = 2, parent = pop1) %>%
  resize(how = "step", N = as.integer(Ne_factor * Ne_start), time = 5000)

pop3 <-
  population("s3", N = Ne_start, time = 2, parent = pop1) %>%
  resize(how = "step", N = as.integer(Ne_start / Ne_factor), time = 5000)

model <- compile_model(
  populations = list(pop1, pop2, pop3),
  generation_time = 1,
  simulation_length = 10000
)

plot_model(model)
```

:::

::::

## Exercise #2 -- solution


<center><h3>[solution](https://github.com/bodkan/popgen-2022/blob/main/solutions/exercise_2.R)</h3></center>






# What else can _slendr_ do?



## Gene flow events

Gene flow is programmed using the `gene_flow()` function:

```{r}
gf <- gene_flow(from = pop1, to = pop2, start = 500, end = 600, rate = 0.13)
```

. . .

<br>

Multiple gene-flow events can be gathered in a list:

```{r}
gf <- list(
  gene_flow(from = pop1, to = pop2, start = 500, end = 600, rate = 0.13),
  gene_flow(from = pop2, to = pop1, start = 700, end = 750, rate = 0.1)
)
```


. . .

<br>
<center>**`gene_flow()` checks admixture events for consistency**</center>




## Let's build another toy model

```{r}
#| code-fold: true
#| fig-width: 7
#| fig-align: center
o <- population("o", time = 1, N = 100)
c <- population("c", time = 2500, N = 500, parent = o)
a <- population("a", time = 3000, N = 2000, parent = c)
b <- population("b", time = 3500, N = 4000, parent = a)
x1 <- population("x1", time = 3800, N = 8000, parent = c)
x2 <- population("x2", time = 4000, N = 10000, parent = x1)

gf <- gene_flow(from = b, to = x1, start = 5500, end = 6000, rate = 0.3)

model <- compile_model(
  populations = list(a, b, x1, x2, c, o), gene_flow = gf,
  generation_time = 1, simulation_length = 7000
)

plot_model(model, proportions = TRUE)

ts <- msprime(model, sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```


```{r}
#| echo: false
f4_model_path <- file.path(tempdir(), "f4model")

model <- compile_model(
  populations = list(a, b, x1, x2, c, o), gene_flow = gf,
  generation_time = 1, simulation_length = 7000,
  path = f4_model_path, overwrite = TRUE, force = TRUE
)
```


## Diversity -- `ts_diversity()`

:::: {.columns}

::: {.column width="48%"}

Extract a list of lists of individuals' names for each population:

```{r}
samples <-
  ts_samples(ts) %>%
  split(., .$pop) %>%
  lapply(pull, "name")
```

:::

::: {.column width="2%"}
&nbsp;
:::

::: {.column width="50%"}

::: {.fragment}

Compute diversity in each population:

```{r}
ts_diversity(ts, samples) %>%
  arrange(diversity)
```

:::

:::

::::



# Exercise #3

## Program the following model in *slendr*

```{r}
#| echo: false
source("solutions/exercise_3.R")
```

```{r}
#| echo: false
#| fig-align: center
title <- theme(plot.title = element_text(size=22))

cowplot::plot_grid(
  plot_model(model) + ggtitle("Normal time scale") + title,
  plot_model(model, log = TRUE, proportions = TRUE) +
    ggtitle("Time on the log-scale") + title
)
```



## Parameter values

-   "CH" outgroup at time 7 Mya ($N_e$ = 7k)

-   "AFR" splitting from "CH" at 6 Mya ($N_e$ = 10k)

-   "ALT" splitting from "AFR" at 700 kya ($N_e$ = 500)

-   "VI" splitting from "ALT" at 120 kya ($N_e$ = 1k)

-   "EUR" splitting from "AFR" at 70 kya ($N_e$ = 5k)

-   gene flow from "VI" to "EUR" at 3% over 50-40 kya

Then simulate 100Mb sequence with `msprime()`, using recombination rate 1e-8 per bp per generation.




## Exercise #3 -- solution

<center><h3>[solution](https://github.com/bodkan/popgen-2022/blob/main/solutions/exercise_3.R)</h3></center>


# Exercise #4

## Diversity and divergence


:::: {.columns}

::: {.column width="60%"}
Use `ts_diversity()` to compute diversity in each simulated population (`CH`, `AFR`, ...).

Does the result correspond to what you would expect based on the demographic history?

What about pairwise genetic divergence between all populations (`ts_divergence()`)? Do your results recapitulate phylogenetic relationships?
:::

::: {.column width="40%"}

```{r}
#| echo: false
#| fig-height: 10
plot_model(model, log = TRUE, proportions = TRUE)
```

:::

::::



## Exercise #4 -- solution (diversity)

```{r}
#| code-fold: true
ts <-
  msprime(model, sequence_length = 50e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)

sample_names <- ts_samples(ts) %>% split(., .$pop) %>% lapply(pull, "name")

ts_diversity(ts, sample_sets = sample_names) %>% arrange(diversity)
```





## Exercise #4 -- solution (divergence)

:::: columns

::: {.column width="40%"}
```{r}
#| code-fold: true
divergence <-
  ts_divergence(ts, sample_names) %>%
  arrange(divergence)

divergence
```
:::

::: {.column width="60%"}
```{r}
#| code-fold: true
divergence %>%
  mutate(pair = paste(x, "-", y),
         pair = fct_reorder(pair, divergence)) %>%
  ggplot(aes(pair, divergence)) +
  geom_point() +
  labs(x = "", y = "divergence") +
  ggtitle("Pairwise genetic divergence between populations") +
  theme_minimal()
```

:::

::::







## Sampling "ancient DNA" time-series

By default, _slendr_ records every individual living at the end of the simulation. Sampling can be also scheduled explicitly:

::: fragment

```{r}
#| echo: false
model <- read_model(f4_model_path)
```

```{r}
#| code-line-numbers: "1-4|6-9|11"
x_schedule <- schedule_sampling(
  model, times = seq(from = 7000, to = 4000, by = -100),
  list(x1, 5), list(x2, 5)
)

abco_schedule <- schedule_sampling(
  model, times = 7000,
  list(a, 1), list(b, 1), list(c, 1), list(o, 1)
)

schedule <- rbind(x_schedule, abco_schedule)
```

:::

::: fragment
The schedule can be used in an `msprime()` call like this:

```{r}
ts <- msprime(model, sequence_length = 100e6, recombination_rate = 1e-8,
              samples = schedule)
```

:::



## Computing $f_4$ statistic -- `ts_f4()`



:::: columns

::: {.column width="60%"}

```{r}
#| echo: false
#| fig-height: 8
plot_model(model)
```

:::

::: {.column width="40%"}

Having simulated data from this model, can we detect gene flow from _b_ into _x1_?

:::

::::



## Computing $f_4$ statistic -- `ts_f4()`

Simulate tree sequence, add mutations on it:

```{r}
ts <- msprime(model, samples = schedule,
              sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```

. . .

<br>

```{r}
ts_f4(ts, "x1_1", "x2_1", "b_1" , "o_1")
```

. . .

<br>

```{r}
ts_f4(ts, "x1_100", "x2_100", "b_1" , "o_1")
```


## Computing $f_4$ statistic for all `x` individuals

```{r}
# extract information about samples from populations x1 and x2
x_inds <- ts_samples(ts) %>% filter(pop %in% c("x1", "x2"))

# create a vector of individual's names
# (used as input in ts_<...>() functions
x_names <- x_inds$name

# iterate over all sample names, compute
# f4(X, C; B, O)
f4_result<- map_dfr(
  x_names,
  function(w) ts_f4(ts, W = w, X = "c_1", Y = "b_1" , Z = "o_1")
)

# add the f4 value as a column to the sample information table
x_inds$f4 <- f4_result$f4
```

## Computing $f_4$ statistic for all `x` individuals

```{r}
#| code-fold: true
#| fig-align: center
ggplot(x_inds) +
  geom_rect(aes(xmin = 5500, xmax = 6000, ymin = -Inf, ymax = Inf), alpha = 0.5, fill = "gray") +
  geom_jitter(aes(time, f4, color = pop)) +
  geom_line(data = . %>% group_by(pop, time) %>% summarise(f4 = mean(f4)),
            aes(time, f4, color = pop), size = 2) +
  geom_hline(yintercept = 0, linetype = 2, size = 1) +
  theme_minimal()
```






# Exercise #5

## Neanderthal ancestry trajectory

1. Take your model of Neanderthal introgression

2. Implement temporal sampling:

- one "European" every 1000 yrs between 40 kya and today
- "Altai" (70 ky old) and "Vindija" individuals (40 ky old)

3. Compute $f_4$-ratio statistic using:

```{r}
#| eval: false
ts_f4ratio(ts, X = '<vector of "European" individuals>',
           A = '<"Altai">', C = '<"African">', O = '<"Chimp">')
```

4. Plot the estimated trajectory of Neanderthal ancestry in Europe over time.


# Exercise #5 -- solution

<center><h3>[solution](https://github.com/bodkan/popgen-2022/blob/main/solutions/exercise_5.R)</h3></center>


```{r}
#| echo: false
source("solutions/exercise_5.R")
```




# Tree-sequence simplification


## Sometimes a tree sequence is too big

```{r}
#| echo: false
source("solutions/exercise_3.R")
ts__ <- ts_simplify(ts, simplify_to = ts_samples(ts) %>% sample_n(100) %>% pull(name))
ts_draw(ts_tree(ts__, 1), labels = TRUE)
```

<center>**Simplification reduces the genealogies only to those nodes that form ancestors of a desired set of samples.**</center>

## Meet `ts_simplify()`

<br>
```{r}
ts_small <- ts_simplify(
  ts,
  simplify_to = c("CH_1", "AFR_1", "AFR_2", "AFR_3",
                  "ALT_1", "VI_1", "EUR_1", "EUR_2", "EUR_3", "EUR_4", "EUR_5")
)
```

<!-- ```{r} -->
<!-- library(ggtree) -->
<!-- pdf("trees.pdf") -->
<!-- for (i in seq_len(ts_small$num_trees)) { -->
<!--   tree <- ts_phylo(ts_small, i, quiet = TRUE) -->
<!-- nodes <- ts_nodes(tree) %>% -->
<!--   as_tibble %>%  -->
<!--   dplyr::select(node = phylo_id, pop) -->

<!-- p_tree <- ggtree(tree) %<+% nodes + -->
<!--   geom_tiplab(aes(color = pop, fill = pop)) + -->
<!--   guides(color = "none") + -->
<!--   ggtitle(i) + -->
<!--   scale_x_continuous(limits = c(-7e6, 900e3)) -->
<!-- print(revts(p_tree)) -->
<!-- } -->
<!-- dev.off() -->
<!-- ``` -->


<br>

<center>**Only the coalescent nodes of genealogies involving<br>these samples will be retained.**</center>


## Extracting a tree #1734

```{r}
tree <- ts_phylo(ts_small, 1734, quiet = TRUE)
```

```{r}
#| code-fold: true
#| fig-align: center
# this needs another R package
# simply using the ape package and running `plot(tree)` will also work
library(ggtree)

nodes <- ts_nodes(tree) %>%
  as_tibble %>% 
  dplyr::select(node = phylo_id, pop)

p_tree <- ggtree(tree) %<+% nodes +
  geom_tiplab(aes(color = pop, fill = pop)) +
  guides(color = "none") +
  scale_x_continuous(limits = c(-7e6, 900e3)) +
  geom_vline(xintercept = -700e3, linetype = 2, color = "red")
revts(p_tree)
```


## Extracting a tree #1

```{r}
tree <- ts_phylo(ts_small, 1, quiet = TRUE)
```

```{r}
#| code-fold: true
#| fig-align: center
# this needs another R package
# simply using the ape package and running `plot(tree)` will also work
library(ggtree)

nodes <- ts_nodes(tree) %>%
  as_tibble %>%
  dplyr::select(node = phylo_id, pop)

p_tree <- ggtree(tree) %<+% nodes +
  geom_tiplab(aes(color = pop, fill = pop)) +
  guides(color = "none") +
  scale_x_continuous(limits = c(-7e6, 900e3)) +
  geom_vline(xintercept = -700e3, linetype = 2, color = "red")
revts(p_tree)
```

::: fragment
<center>**Introgression!**</center>
:::



# Bonus exercise

## Try to implement something relevant for your own work

-   Program a demographic model for your species of interest
-   Choose a statistic whose value "true value" you know from the literature (divergence? diversity? f4-statistic? ancestry proportion?)
- Try to replicate the statistic in a _slendr_ simulation using some of its `ts_<...>()` tree-sequence functions!



